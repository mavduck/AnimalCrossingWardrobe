@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
@{
    var disabledPrev = Model.PageIndex > 1 ? "" : "disabled";
    var disabledNext = Model.PageIndex < Model.TotalPages ? "" : "disabled";
    
    var routeFilters = new Dictionary<string, string>
        {
            { "SelectedVillagerName", @Model.SelectedVillagerName },
            { "ClothingCategory", @Model.ClothingCategory },
            { "Color", @Model.Color },
            { "Style", @Model.Style },
        };
}

<div class="container vstack gap-3">
    <form class="d-flex">
        <div class="p-2 flex-fill">
            <select class=" form-select form-select-pink" asp-for="ClothingCategory" asp-items="SelectListItemsUtility.Categories">
                <option selected value=""> Choose Clothing Type </option>
            </select>
        </div>
        <div class="p-2 flex-fill">
            <select class="form-select form-select-pink" asp-for="Color" asp-items="SelectListItemsUtility.Colors">
                <option selected value=""> Choose Color </option>
            </select>
        </div>
        <div class="p-2 flex-fill">
            <select class="col-2 form-select form-select-pink" asp-for="Style" asp-items="SelectListItemsUtility.Styles">
                <option selected value=""> Choose Style </option>
            </select>
        </div>
        <input type="hidden" id="selectedVillagerNameInput" asp-for="SelectedVillagerName" value="@Model.SelectedVillagerName">
        <div class="p-2 flex-fill">
            <div class="dropdown">
                <button value="@Model.SelectedVillagerName" asp-for="SelectedVillagerName" class="dropdown-toggle form-select form-select-pink w-100" type="button" data-bs-toggle="dropdown">
                    <div id="selectedVillagerDropdownCover">
                        @if(String.IsNullOrEmpty(@Model.SelectedVillagerName)){
                            @("Choose Villager");
                        }
                        else{
                            <img class="villager-icon-sm" src="@Model.SelectedVillagerIconUrl" >
                            @Model.SelectedVillagerName
                        }
                    </div>
                </button>
                <ul id="villagerDropdown" class="dropdown-menu dropdown-menu-scroll">
                        <li class="dropdown-item">
                            <input id="villagerDropdownSearch" onkeyup="villagerSearch()" type="text">
                        </li>
                        <li id="NoVillagerListItem" onclick="villagerSelect(this.id)" class="dropdown-item villagerListItem @(String.IsNullOrEmpty(Model.SelectedVillagerName) ? "active" : "")" data-value="">
                            <img class="villager-icon-fit" src="https://dodo.ac/np/images/6/68/Tom_Nook_NH_Character_Icon.png">
                            No Villager
                        </li>
                    @foreach (Villager villager in Model.VillagerList)
                    {
                        <li id="@(villager.Name+"ListItem")" onclick="villagerSelect(this.id)" class="dropdown-item villagerListItem @(Model.SelectedVillagerName == @villager.Name ? "active" : "")" data-value="@villager.Name">
                            <img class="villager-icon-fit" src="@villager.Details.IconUrl" >
                            @villager.Name
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="p-2 flex-fill">
            <input class="btn btn-pink" type="submit" value="Filter" />
        </div>
    </form>
    <hr/>
    <div class="d-flex justify-content-between">
        <div class="fs-small text-muted">Page @Model.PageIndex of @Model.TotalPages</div>
        @if(!String.IsNullOrEmpty(Model.SelectedVillagerName)){
            <div class="fs-small text-muted" >
                @Model.SelectedVillagerName's
                <img class="villager-icon-sm" src="@Model.SelectedVillagerIconUrl" >
                favorite styles are @(String.Join(" and ",@Model.CompareStyles)) 
                and their favorite colors are @(String.Join(" and ",@Model.CompareColors)) 
            </div>
        }
        <div class="btn-group">
            <a class="btn btn-pink btn-sm @disabledPrev" asp-page="/Index" asp-all-route-data="@routeFilters" asp-route-PageIndex="@(Model.PageIndex - 1)">
                <i class="bi bi-arrow-left-short"></i>
            </a>
            <a class="btn btn-pink btn-sm @disabledNext" asp-page="/Index" asp-all-route-data="@routeFilters" asp-route-PageIndex="@(Model.PageIndex + 1)">
               <i class="bi bi-arrow-right-short"></i>
            </a>
        </div>

    </div>
    <div class="row gy-4">
        @{
            int index = 0;
        }
        @foreach(ClothingItem Item in @Model.ClothingList){
            index++;
            <div class="col-md-3 col-sm-4 col-xs-6">
                <div class="card card-pink">
                    <img src="@Item.ImageUrl" class="card-img-top">
                    <div class="card-body">
                        <div class="card-title card-title-pink w-100 text-center text-capitalize"> @Item.VariationName @Item.ClothingName </div>
                        @if(String.IsNullOrEmpty(Model.SelectedVillagerName)){
                            <div class="d-flex align-items-center my-2">
                                <div class="flex-shrink-0">
                                    <i class="bi bi-heart-fill opacity-25 icon-pink"></i>
                                </div>
                                <div class="flex-grow-1 ms-3 text-muted fs-small">
                                    Select villager to see compatibility rating
                                </div>
                            </div>
                        }
                        else{
                            int rating = 1;

                            foreach(string color in Item.Colors){
                                if(Model.CompareColors.Contains(color))
                                rating++;
                            }
                            foreach(string style in Item.Styles){
                                if(Model.CompareStyles.Contains(style))
                                    rating++;
                            }

                            <div class="my-2 d-flex justify-content-center gap-1">
                                <span><img class="villager-icon-sm" src="@Model.SelectedVillagerIconUrl" ></span>
                                @for(int i = 1; i <= 5; i++){
                                    int opacity = i <= rating ? 100 : 25;
                                    <i class="bi bi-heart-fill icon-pink opacity-@opacity"></i>
                                }
                            </div>
                        }
                        <div class="accordion" id="accord@(index)">
                              <div class="accordion-item">
                                    <div class="accordion-header" id="heading@(index)">
                                        <button class="accordion-button collapsed fs-small" type="button" data-bs-toggle="collapse" data-bs-target="#collapse@(index)">
                                            Details
                                        </button>
                                    </div>
                                    <div id="collapse@(index)" class="accordion-collapse collapse" data-bs-parent="#accord@(index)">
                                        <div class="accordion-body p-2">
                                            <div class="fs-small text-muted"><strong>Styles:</strong> @(String.Join(", ",@Item.Styles))</div>
                                            <div class="fs-small text-muted"><strong>Colors:</strong> @(String.Join(", ", @Item.Colors))</div>
                                            
                                        </div>
                                    </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="btn-group">
        <a class="btn btn-pink @disabledPrev" asp-page="/Index" asp-all-route-data="@routeFilters" asp-route-PageIndex="@(Model.PageIndex - 1)">Previous</a>
        @foreach(String pageIndex in @PaginationIndexes()){
            @if(pageIndex == "..."){
                <a class="btn btn-pink disabled" >@pageIndex</a>
            }
            else {
                <a class="btn btn-pink @(Model.PageIndex.ToString().Equals(@pageIndex) ? "active" : "")" asp-page="/Index" asp-all-route-data="@routeFilters" asp-route-PageIndex=@pageIndex>@pageIndex</a>
            }
        }
        <a class="btn btn-pink @disabledNext" asp-page="/Index" asp-all-route-data="@routeFilters" asp-route-PageIndex="@(Model.PageIndex + 1)">Next</a>
    </div>

</div>

@functions{
    public List<String> PaginationIndexes(){
        List<String> pages = new List<String>();

        //Consistently show the same number of page indexes
        /*Follows template [1,...,{window},current,{window},...,Last] when the current page
        doesn't overlap with the first or last, otherwise, keep that same number of page indexes
        to be shown(including ...'s) by keeping track of "leftover" amount from window on either side
        */

        int window = 4;

        //Size is based on the window and then adds 5 due to [1,...,current,...,Last]
        int size = window * 2 + 5;

        //If the number of pages is less than or equal to target size, return them all
        if(Model.TotalPages <= size){
            for(int i = 1; i <= Model.TotalPages; i++)
                pages.Add(i.ToString());
            return pages;
        }

        int start = Model.PageIndex - window;
        int end = Model.PageIndex + window;

        //leftover from start window, find the overlap from [1,...,itself]
        int startLeftover = 3 - start;
        //leftover from end window, find the overlap from [...,last]
        int endLeftover = end - Model.TotalPages + 2;

        pages.Add("1");

        /*
        Since we accounted for page amount where it is less than size which is the only case where
        startLeftover or endLeftover could be positive or 0 and the opposing side wouldnt include ...,
        we only need to account for three cases where atleast one side will include ...
            if startLeftover is positive or 0 we know that the end will have ... and we know 
        that we will need to change the end index to account for the start leftover amount 
            if endLeftover is positive or 0 we know that the beginning will have ... and the start index
        will need to account for the end leftover amount
            neither is positive therefore our window holds and both sides need ...
        */
        if(startLeftover >= 0){
            for(int i = 2; i <= end + startLeftover; i++){
                pages.Add(i.ToString());
            }
            pages.Add("...");
            pages.Add(Model.TotalPages.ToString());
        }
        else if(endLeftover >= 0){
            pages.Add("...");
            for(int i = start - endLeftover; i <= Model.TotalPages; i++)
                pages.Add(i.ToString());
        }
        else {
            pages.Add("...");
            for(int i = start; i <= end; i++)
                pages.Add(i.ToString());
            pages.Add("...");
            pages.Add(Model.TotalPages.ToString());
        }
        return pages;;
    }
}