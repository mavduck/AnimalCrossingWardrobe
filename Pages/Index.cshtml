@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="container vstack gap-3">
    <form class="row g-3 gy-4">
        <div class="col-3">
            <select class=" form-select" asp-for="ClothingCategory" asp-items="SelectListItemsUtility.Categories">
                <option selected value=""> Choose Clothing Type </option>
            </select>
        </div>
        <div class="col-2">
            <select class="form-select" asp-for="Color" asp-items="SelectListItemsUtility.Colors">
                <option selected value=""> Choose Color </option>
            </select>
        </div>
        <div class="col-3">
            <select class="col-2 form-select" asp-for="Style" asp-items="SelectListItemsUtility.Styles">
                <option selected value=""> Choose Style </option>
            </select>
        </div>
        <div class="col-3">
            <select class="form-select" asp-for="SelectedVillagerName">
                <option selected value=""> Choose Villager </option>
                @foreach (Villager villager in Model.VillagerList)
                {
                    <option value="@villager.Name">@villager.Name</option>
                }
            </select>
        </div>
        <div class="col-1">
            <input class="btn btn-pink" type="submit" value="Filter" />
        </div>
    </form>
    <div class="row gy-4">
        @foreach(ClothingItem Item in @Model.ClothingList){
            <div class="col-md-3 col-sm-4 col-xs-6">
                <div class="card">
                    <img src="@Item.ImageUrl" class="card-img-top">
                    <div class="card-body">
                        <h6 class="card-title"> @Item.VariationName @Item.ClothingName </h6>
                        @{
                            int rating = 1;

                            foreach(string color in Item.Colors){
                                if(Model.CompareColors.Contains(color))
                                rating++;
                            }
                            foreach(string style in Item.Styles){
                                if(Model.CompareStyles.Contains(style))
                                    rating++;
                            }

                        }
                        <div>
                            @for(int i = 1; i <= 5; i++){
                                int opacity = i <= rating ? 100 : 25;
                                <i class="bi bi-heart-fill opacity-@opacity" style="color: hotpink;"></i>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    @{
        var disabledPrev = Model.PageIndex > 1 ? "" : "disabled";
        var disabledNext = Model.PageIndex < Model.TotalPages ? "" : "disabled";
        
        var routeFilters = new Dictionary<string, string>
            {
                { "SelectedVillagerName", @Model.SelectedVillagerName },
                { "ClothingCategory", @Model.ClothingCategory },
                { "Color", @Model.Color },
                { "Style", @Model.Style },
            };
    }
    
    <div class="btn-group">
        <a class="btn btn-pink @disabledPrev" asp-page="/Index" asp-all-route-data="@routeFilters" asp-route-PageIndex="@(Model.PageIndex - 1)">Previous</a>
        @foreach(String pageIndex in @PaginationIndexes()){
            @if(pageIndex == "..."){
                <a class="btn btn-pink disabled" >@pageIndex</a>
            }
            else {
                <a class="btn btn-pink @(Model.PageIndex.ToString().Equals(@pageIndex) ? "active" : "")" asp-page="/Index" asp-all-route-data="@routeFilters" asp-route-PageIndex=@pageIndex>@pageIndex</a>
            }
        }
        <a class="btn btn-pink @disabledNext" asp-page="/Index" asp-all-route-data="@routeFilters" asp-route-PageIndex="@(Model.PageIndex + 1)">Next</a>


    </div>

</div>

@functions{
    public List<String> PaginationIndexes(){
        List<String> pages = new List<String>();

        int window = 4;
        int size = window + 5;

        if(Model.TotalPages <= size){
            for(int i = 1; i <= Model.TotalPages; i++)
                pages.Add(i.ToString());
            return pages;
        }

        int start = Model.PageIndex - window;
        int end = Model.PageIndex + window;
        int startLeftover = 3 - start;
        int endLeftover = end - Model.TotalPages + 2;

        pages.Add("1");
    
        if(startLeftover >= 0){
            for(int i = 2; i <= end + startLeftover; i++){
                pages.Add(i.ToString());
            }
            pages.Add("...");
            pages.Add(Model.TotalPages.ToString());
        }
        else if(endLeftover >= 0){
            pages.Add("...");
            for(int i = start - endLeftover; i <= Model.TotalPages; i++)
                pages.Add(i.ToString());
        }
        else {
            pages.Add("...");
            for(int i = start; i <= end; i++)
                pages.Add(i.ToString());
            pages.Add("...");
            pages.Add(Model.TotalPages.ToString());
        }
        return pages;;
    }
}